name: Build and Release PDF
on:
  push:
    branches:
      - main
jobs:
  build-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Free up disk space for Nix
        uses: wimpysworld/nothing-but-nix@main

      - name: Install Nix
        uses: cachix/install-nix-action@v31
        with:
          github_access_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Build PDF with Nix
        run: |
          nix build
          cp result/main.pdf ./main.pdf

      - name: Get current month tag
        id: month_tag
        run: |
          echo "tag=$(date +'%Y-%m')" >> $GITHUB_OUTPUT
          echo "release_name=$(date +'%B %Y')" >> $GITHUB_OUTPUT

      - name: Delete old releases (keep one per month)
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          CURRENT_TAG="${{ steps.month_tag.outputs.tag }}"
          gh release list --limit 1000 --json tagName,createdAt > releases.json
          declare -A seen_months
          while IFS= read -r tag; do
            month_prefix="${tag:0:7}"
            if [ "$tag" = "$CURRENT_TAG" ]; then
              continue
            fi
            if [ -n "${seen_months[$month_prefix]}" ]; then
              echo "Deleting older release: $tag"
              gh release delete "$tag" -y
            else
              seen_months[$month_prefix]=1
              echo "Keeping release: $tag"
            fi
          done < <(jq -r 'sort_by(.createdAt) | reverse | .[].tagName' releases.json)

      - name: Create or update release
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          TAG="${{ steps.month_tag.outputs.tag }}"
          RELEASE_NAME="${{ steps.month_tag.outputs.release_name }}"
          COMMIT_SHA="${{ github.sha }}"
          COMMIT_SHORT="${COMMIT_SHA:0:7}"

          if gh release view "$TAG" >/dev/null 2>&1; then
            echo "Release $TAG exists, updating..."
            gh release delete "$TAG" -y
            echo "Creating updated release $TAG..."
            gh release create "$TAG" main.pdf \
              --title "PDF Build - $RELEASE_NAME" \
              --notes "Automated PDF build from commit $COMMIT_SHORT (${COMMIT_SHA})"
          else
            echo "Creating new release $TAG..."
            gh release create "$TAG" main.pdf \
              --title "PDF Build - $RELEASE_NAME" \
              --notes "Automated PDF build from commit $COMMIT_SHORT (${COMMIT_SHA})"
          fi

      - name: Upload PDF as artifact
        uses: actions/upload-artifact@v4
        with:
          name: main-pdf
          path: main.pdf
          retention-days: 7
